<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Coder Yel</title>
    <link>http://freedomofme.github.io/categories/android/</link>
    <description>Recent content in Android on Coder Yel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Apr 2016 19:52:07 +0800</lastBuildDate>
    <atom:link href="http://freedomofme.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>如何根据二叉树的中序和前序后序推导出整棵二叉树</title>
      <link>http://freedomofme.github.io/%E5%BC%80%E5%8F%91/%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%89%8D%E5%BA%8F%E5%90%8E%E5%BA%8F%E6%8E%A8%E5%AF%BC%E5%87%BA%E6%95%B4%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Fri, 01 Apr 2016 19:52:07 +0800</pubDate>
      
      <guid>http://freedomofme.github.io/%E5%BC%80%E5%8F%91/%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%89%8D%E5%BA%8F%E5%90%8E%E5%BA%8F%E6%8E%A8%E5%AF%BC%E5%87%BA%E6%95%B4%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>

&lt;p&gt;本文将主要介绍程序的主要计算流程。&lt;/p&gt;

&lt;p&gt;写作目的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当然是为了为了加深理解二叉树遍历啦&lt;/li&gt;
&lt;li&gt;因为受不了笔试题老出这种题目，所以做出来方便大家以后答题O(∩_∩)O~&lt;/li&gt;
&lt;li&gt;最关键的是，每次遇到这种题目，我只会凑./捂脸&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so，我决定花一个小时，写个程序一劳永逸，结果还没写完，我就学会了，不需要它了，送给大家~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;首先在知道中序的前提下，任意知道一个前序、后序，即可以构建整棵二叉树，也就知道了所有顺序的遍历。&lt;/p&gt;

&lt;h4 id=&#34;由前序中序推导:65af8147e2e31eeb70f80702d9fc030d&#34;&gt;由前序中序推导&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;已知一棵二叉树的前序序列和中序序列，构造该二叉树的过程如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;根据前序序列的第一个元素建立根结点；&lt;/li&gt;
&lt;li&gt;在中序序列中找到该元素，确定根结点的左右子树的中序序列；&lt;/li&gt;
&lt;li&gt;在前序序列中确定左右子树的前序序列；&lt;/li&gt;
&lt;li&gt;由左子树的前序序列和中序序列建立左子树；&lt;/li&gt;
&lt;li&gt;由右子树的前序序列和中序序列建立右子树。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;由后序中序推导:65af8147e2e31eeb70f80702d9fc030d&#34;&gt;由后序中序推导&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;已知一棵二叉树的后序序列和中序序列，构造该二叉树的过程如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;根据后序序列的最后一个元素建立根结点；&lt;/li&gt;
&lt;li&gt;在中序序列中找到该元素，确定根结点的左右子树的中序序列；&lt;/li&gt;
&lt;li&gt;在后序序列中确定左右子树的后序序列；&lt;/li&gt;
&lt;li&gt;由左子树的后序序列和中序序列建立左子树；&lt;/li&gt;
&lt;li&gt;由右子树的后序序列和中序序列建立右子树。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;引用自：&lt;a href=&#34;http://blog.sina.com.cn/s/blog_8c243ea30102uzwo.html&#34;&gt;http://blog.sina.com.cn/s/blog_8c243ea30102uzwo.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;核心代码:65af8147e2e31eeb70f80702d9fc030d&#34;&gt;核心代码&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;public static void calPostOrder(String preString, String midString) {
    if (preString.length() == 0) return;
    if (preString.length() == 1) {
        result.add(preString.charAt(0));
    }
    if (preString.length() &amp;gt; 1) {
        //前序首字母拆分中序字符串           
        String[] resultStrings = midString.split(preString.charAt(0) + &amp;quot;&amp;quot;);
        for (int i = 0; i &amp;lt; resultStrings.length; i++) {
            String newPreString = findSubStringInPreORPostString(preString, resultStrings[i]);
            calPostOrder(newPreString, resultStrings[i]);
        }
        result.add(preString.charAt(0));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中findSubStringInPreORPostString()函数就是从先序字符串中取出对应中序的字符串的子串。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>