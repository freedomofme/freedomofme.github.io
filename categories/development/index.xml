<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Coder Yel</title>
    <link>http://freedomofme.github.io/categories/development/</link>
    <description>Recent content in Development on Coder Yel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Sep 2016 18:31:12 +0800</lastBuildDate>
    <atom:link href="http://freedomofme.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JNI静态与动态注册介绍以及Demo实现</title>
      <link>http://freedomofme.github.io/%E5%BC%80%E5%8F%91/demoOfJniRegister/</link>
      <pubDate>Sat, 17 Sep 2016 18:31:12 +0800</pubDate>
      
      <guid>http://freedomofme.github.io/%E5%BC%80%E5%8F%91/demoOfJniRegister/</guid>
      <description>

&lt;p&gt;一直以来，都觉得Java和Native C的通信没有比较全面直观的教程，知道前几天看见一个大牛的总结。所以接着这个机会，对JNI调用做一些简单记录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* JNI的两种注册机制
* 较大型项目JNI的开发框架
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jni:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;JNI&lt;/h3&gt;

&lt;p&gt;JNI是Java和C进行混合编程的桥梁，其中的核心点就是在Java层声明的Native方法，如何在C层中找到对应的实现。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;静态注册&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;动态注册，需要提供Java中Native方法的方法签名和Native层中对应的实现函数。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;静态注册:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;静态注册&lt;/h4&gt;

&lt;p&gt;要求C/C++层的函数名符合某种特定的要求:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;包含Java中Native方法的目录信息和方法名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个栗子：
假如以下是StaticTest.java 类代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package jnicourse.hhx.com.jnidemo;

/**
* Created by CodeYel on 16/9/17.
*/
public class StaticTest {
    public native int doAdd(int param1,int param2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这对应的C++中jnicourse_hhx_com_jnidemo_StaticTest.h的函数名是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
* Class:     jnicourse_hhx_com_jnidemo_StaticTest
* Method:    doAdd
* Signature: (II)I
*/
JNIEXPORT jint JNICALL Java_jnicourse_hhx_com_jnidemo_StaticTest_doAdd (JNIEnv *, jobject, jint, jint);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按照以上规则进行命名就，在调用到Native的方法时,JVM会去查找是否存在对应函数名的函数，以此实现静态注册。&lt;/p&gt;

&lt;p&gt;附带礼品：NDK提供了javap命令来方便根据.java文件来生成.h。
假如你使用AS作为你的IDE，你可以自定义扩展工具，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;demoOfJniRegister_1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;demoOfJniRegister_2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;使用方法：在包含Native声明的方法的文件上右键，选择External Tool中的Javap工具。&lt;/p&gt;

&lt;h4 id=&#34;动态注册:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;动态注册&lt;/h4&gt;

&lt;p&gt;动态注册相对于静态注册，优点是不再根据特定路径查找函数的实现，带来两个好处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有了冗杂的函数名，适用于大型项目开发。&lt;/li&gt;
&lt;li&gt;由于不再根据Native函数查找对应的jni层函数，所以首次调用速度比静态注册快。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;开发者需要自行提供Java层和C/C++层中的映射关系。&lt;/p&gt;

&lt;p&gt;一种可行的方法是基于JNI重载JNI_OnLoad()，在其中对函数进行动态注册。&lt;/p&gt;

&lt;p&gt;举个🌰：&lt;/p&gt;

&lt;p&gt;DynamicTest.java&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package jnicourse.hhx.com.jnidemo;

/**
 * Created by CodeYel on 16/9/17.
 */
public class DynamicTest {
    public native int doTwo(int param1, int param2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DynamicBind.cpp&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;以下三个部分完成了对方法的动态注册任务。此步骤涉及到如何获取Java函数的函数问题。具体请查看文末的参考文献，点击此&lt;a href=&#34;http://zhixinliu.com/2015/07/01/2015-07-01-jni-register/&#34;&gt;Link&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;static const char *className = &amp;ldquo;jnicourse/hhx/com/jnidemo/DynamicTest&amp;rdquo;;&lt;/p&gt;

&lt;p&gt;static JNINativeMethod gJni_Methods_DynamicTest[] = {
    {&amp;ldquo;doTwo&amp;rdquo;, &amp;ldquo;(II)I&amp;rdquo;, (void*)addTwoNumber},
};&lt;/p&gt;

&lt;p&gt;static int jniRegisterNativeMethods(JNIEnv* env, const char* className, const JNINativeMethod* gMethods, int numMethods)
{
    jclass clazz;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; clazz = (env)-&amp;gt;FindClass( className);
 if (clazz == NULL) {


    return -1;
}
int result = 0;
if ((env)-&amp;gt;RegisterNatives(clazz, gMethods, numMethods) &amp;lt; 0) {


    result = -1;
}
(env)-&amp;gt;DeleteLocalRef(clazz);
return result;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重载JNI_OnLoad函数，并在其中调用jniRegisterNativeMethods函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jint JNI_OnLoad(JavaVM* vm, void* reserved){


JNIEnv* env = NULL;
jint result = -1;


if (vm-&amp;gt;GetEnv((void**) &amp;amp;env, JNI_VERSION_1_4) != JNI_OK) {
    return result;
}


jniRegisterNativeMethods(env, className, gJni_Methods_DynamicTest, sizeof(gJni_Methods_DynamicTest) / sizeof(JNINativeMethod));


return JNI_VERSION_1_4;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PS：在函数返回值方面，可以做一些定制，来根据返回值判断调用jniRegisterNativeMethods是否成功。&lt;/p&gt;

&lt;h3 id=&#34;jni开发工具:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;JNI开发工具&lt;/h3&gt;

&lt;p&gt;结构如下：
&lt;img src=&#34;demoOfJniRegiste_4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;动态注册框架:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;动态注册框架&lt;/h4&gt;

&lt;p&gt;主要由：JniHelper.h和JniHelper.cpp构成。&lt;/p&gt;

&lt;p&gt;是上文介绍的动态注册方法做了一个简单的封装，具体请看DEMO中的DynamicBind2.h和DynamicBind2.cpp文件实现。&lt;/p&gt;

&lt;p&gt;使用方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在需要动态注册的文件中，引入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;util/JniHelper.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;定义一个函数进行注册：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jint register_DT2(JNIEnv * env) {
    return jniRegisterNativeMethods(env, className2, gJni_Methods_DynamicTest2, NELEM(gJni_Methods_DynamicTest2));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在上文的JNI_OnLoad函数进行调用register_DT2函数。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;log框架:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;Log框架&lt;/h4&gt;

&lt;p&gt;主要由：JniDebug.h和JniDebug.cpp构成。
做了一个简单的实现，具体请看文末贴出的文本DEMO的链接。&lt;/p&gt;

&lt;p&gt;注意在Android.mk文件中添加以下语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;注意事项:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;注意事项&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Android.mk中的添加.cpp文件。&lt;/p&gt;

&lt;p&gt;例如以下代码将dynamic，static，util目录下的cpp文件引入。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FILE_LIST := $(wildcard $(LOCAL_PATH)/dynamic/*.cpp) \
$(wildcard $(LOCAL_PATH)/static/*.cpp) \
$(wildcard $(LOCAL_PATH)/util/*.cpp)
LOCAL_SRC_FILES :=$(FILE_LIST:$(LOCAL_PATH)/%=%)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;参考文献:2848143d4f7cd8cc66ecf3924bd7d3e0&#34;&gt;参考文献&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;很棒的文章，推荐。另外已经和此文作者进行Email沟通。&lt;a href=&#34;http://zhixinliu.com/2015/07/01/2015-07-01-jni-register/&#34;&gt;http://zhixinliu.com/2015/07/01/2015-07-01-jni-register/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;介绍了一种使用实验性的Gradle进行开发的方法。&lt;a href=&#34;https://github.com/freekite/Android-JNITest&#34;&gt;https://github.com/freekite/Android-JNITest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一篇比较详细的JNI文章。&lt;a href=&#34;https://my.oschina.net/wolfcs/blog/111309&#34;&gt;https://my.oschina.net/wolfcs/blog/111309&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>仿网易新闻Android端APP实现</title>
      <link>http://freedomofme.github.io/%E5%BC%80%E5%8F%91/%E4%BB%BF%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BBAndroid%E7%AB%AFAPP%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Apr 2016 17:59:59 +0800</pubDate>
      
      <guid>http://freedomofme.github.io/%E5%BC%80%E5%8F%91/%E4%BB%BF%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BBAndroid%E7%AB%AFAPP%E5%AE%9E%E7%8E%B0/</guid>
      <description>

&lt;h2 id=&#34;主要功能展示和代码实现:0e1910fcdf867805caab27c6340158d2&#34;&gt;主要功能展示和代码实现&lt;/h2&gt;

&lt;p&gt;差不多花了一周的时间，目前实现的了新闻下的包括头条、体育、娱乐的一系列的新闻展示，以及点击后进入的新闻详情展示。&lt;/p&gt;

&lt;h3 id=&#34;目前效果:0e1910fcdf867805caab27c6340158d2&#34;&gt;目前效果&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目前效果请访问该网页：&lt;a href=&#34;http://www.cnblogs.com/FightForFreedom/p/4807083.html&#34;&gt;http://www.cnblogs.com/FightForFreedom/p/4807083.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更新：目前新闻内容的详情展示已经实现&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;技术实现:0e1910fcdf867805caab27c6340158d2&#34;&gt;技术实现&lt;/h2&gt;

&lt;h3 id=&#34;框架实现:0e1910fcdf867805caab27c6340158d2&#34;&gt;框架实现&lt;/h3&gt;

&lt;p&gt;APP总体底部的4个Fragment切换和在每个Fragment中的ViewPage切换, 采用的是LuckyJayce/ViewPagerIndicator的开源框架：地址是&lt;a href=&#34;https://github.com/LuckyJayce/ViewPagerIndicator&#34;&gt;https://github.com/LuckyJayce/ViewPagerIndicator&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;列表实现:0e1910fcdf867805caab27c6340158d2&#34;&gt;列表实现&lt;/h3&gt;

&lt;p&gt;新闻列表采用纵向RecyclerView，其中暂时划分为3种类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static enum ITEM_TYPE {
    ITEM_TYPE_BANNER,
    ITEM_TYPE_IMAGE,
    ITEM_TYPE_TEXT
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分别表示以下3种类型：
- BANNER：
&lt;img src=&#34;http://images2015.cnblogs.com/blog/739642/201509/739642-20150914143937664-372953191.png&#34; alt=&#34;&#34; /&gt;
- TEXT：
&lt;img src=&#34;http://images2015.cnblogs.com/blog/739642/201509/739642-20150914143948320-1282950477.png&#34; alt=&#34;&#34; /&gt;
- IMAGE：
&lt;img src=&#34;http://images2015.cnblogs.com/blog/739642/201509/739642-20150914143954336-1896838803.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中ITEM_TYPE_BANNER 采用SwitchImage单独控件形式（内部ViewPage实现
ITEM_TYPE_TEXT比较简单，
ITEM_TYPE_IMAGE的网易原版实现是3张图片。&lt;/p&gt;

&lt;h3 id=&#34;列表改进:0e1910fcdf867805caab27c6340158d2&#34;&gt;列表改进&lt;/h3&gt;

&lt;p&gt;为了增加用户体验，决定替换掉ITEM_TYPE_IMAGE中三种图片，改为水平滑动形式。
现已实现了水平滑动和按钮点击响应：
&lt;img src=&#34;http://images2015.cnblogs.com/blog/739642/201509/739642-20150914144420304-1934370299.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当点击任意一张图片后将调转到ImageDisplayActivity：
&lt;img src=&#34;http://images2015.cnblogs.com/blog/739642/201509/739642-20150914152234539-499422592.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面我将着重描述下ITEM_TYPE_IMAGE的水平滑动实现。&lt;/p&gt;

&lt;p&gt;想到水平滑动，我想大家肯定会想到这些控件：ViewPage，Gallery，HorizontalScrollview等等。&lt;/p&gt;

&lt;p&gt;不过，Google近来推出的RecyclerView也支持水平滑动，那就用它来试试。&lt;/p&gt;

&lt;p&gt;首先，垂直RecyclerView嵌入水平RecyclerView比较顺利，没有出现子列表只显示一行之类的问题，同时对水平RecyclerView滑动也没有出现问题。&lt;/p&gt;

&lt;p&gt;但是当我想对水平RecyclerView中的某张图片进行点击时，出现了onClick函数没有回调的问题，由于笔者水平和时间有限，暂时没有深究这个问题。&lt;/p&gt;

&lt;p&gt;于是采用了onTouch函数做点击响应的回调, 做了如下简单的判断：&lt;/p&gt;

&lt;p&gt;用户是点击图片还是水平滑动RecyclerIView&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imageView.setOnTouchListener(new View.OnTouchListener() {
  @Override
 public boolean onTouch(View v, MotionEvent event) {
  //抬起按钮时判断，之前是否滑动了,若没有滑动则响应点击事件
                if (event.getAction() == MotionEvent.ACTION_UP &amp;amp;&amp;amp; !isMoved)
                    mListener.onViewPageTouch((NetworkImageView) v, index);
                else {
                    isMoved = false;
                }
                if (event.getAction() == MotionEvent.ACTION_MOVE) {
                    isMoved = true;
                }
                return true;
            }
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;顶部沉浸式状态栏实现:0e1910fcdf867805caab27c6340158d2&#34;&gt;顶部沉浸式状态栏实现&lt;/h3&gt;

&lt;p&gt;参考了这篇文章：
&lt;a href=&#34;http://www.jianshu.com/p/f8374d6267ef&#34;&gt;http://www.jianshu.com/p/f8374d6267ef&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;新闻详情实现:0e1910fcdf867805caab27c6340158d2&#34;&gt;新闻详情实现&lt;/h3&gt;

&lt;p&gt;首先，根据网络返回的数据的样式确定解析方案：&lt;/p&gt;

&lt;p&gt;NewsDisplayActivity.java第70行，展示了一个返回数据Html格式的样例：&lt;a href=&#34;https://github.com/freedomofme/Netease/commit/bb6db85de547d4d5243e17e881bc2116122e52d6&#34;&gt;https://github.com/freedomofme/Netease/commit/bb6db85de547d4d5243e17e881bc2116122e52d6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文采用的方法是通过Android自带的android.text.Html类解析Html和html下&lt;img&gt;标签的图像。
核心代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    URLImageParser p = new URLImageParser(content, this);
    Spanned htmlSpan = Html.fromHtml(body, p, null);
    content.setText(htmlSpan);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中的URLImageParser是用来解析&lt;img&gt;标签的，这里有很大的进一步优化的空间。&lt;/p&gt;

&lt;p&gt;这类主要是参考该文，并修正了图片尺寸上的问题。&lt;a href=&#34;http://stackoverflow.com/questions/15617210/android-html-fromhtml-with-images/15617341#15617341&#34;&gt;http://stackoverflow.com/questions/15617210/android-html-fromhtml-with-images/15617341#15617341&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当然，除了用TextView来展示Html（在Android
中就是Spanned类），也可以使用WebView。
两者的主要区别：
* WebView：加载HTML更为方便（笔者觉得），支持的标签更多，与APP交互需要通过JS接口
* TextView： 除了文本显示，对于其他很多交互行为，需要重写函数。开发者对展示细节的控制能力更强。
详细内容可以参考:&lt;a href=&#34;https://www.ibm.com/developerworks/cn/web/1407_zhangqian_androidhtml/&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;数据网络请求:0e1910fcdf867805caab27c6340158d2&#34;&gt;数据网络请求&lt;/h3&gt;

&lt;p&gt;采用的是Volley框架，并封装了RequestSingletonFactory工厂类来方便请求。
URLs类中采用反射的方式来读取静态URL的数据。&lt;/p&gt;

&lt;h3 id=&#34;接下来:0e1910fcdf867805caab27c6340158d2&#34;&gt;接下来&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;完善新闻阅读的排版，对于部分网页存在数据不兼容，导致解析的Bug&lt;/li&gt;
&lt;li&gt;增加查看新闻评论功能&lt;/li&gt;
&lt;li&gt;增加用户设置界面&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;下载地址:0e1910fcdf867805caab27c6340158d2&#34;&gt;下载地址&lt;/h3&gt;

&lt;p&gt;本项目将在持续更新，更加完善，项目源码地址：
&lt;a href=&#34;https://github.com/freedomofme/Netease&#34;&gt;https://github.com/freedomofme/Netease&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://files.cnblogs.com/files/FightForFreedom/app-release.apk&#34;&gt;APK安装包下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本开源项目仅供学习，不得作为其他用途&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://freedomofme.github.io/aboutme/</link>
      <pubDate>Fri, 01 Apr 2016 15:21:43 +0800</pubDate>
      
      <guid>http://freedomofme.github.io/aboutme/</guid>
      <description>&lt;p&gt;你好，我叫Coder Yel，中山大学数据科学学院的研究生一枚，很高兴你的到来，本站关注于一些小众的Java和Android知识的介绍和汇总。&lt;/p&gt;

&lt;p&gt;2016.4.6 完成的博客文章迁移~&lt;/p&gt;

&lt;p&gt;我的邮箱: &lt;a href=&#34;mailto:huanghanxiongchn@gmail.com&#34;&gt;huanghanxiongchn@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我的Git: &lt;a href=&#34;https://github.com/freedomofme&#34;&gt;https://github.com/freedomofme&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>